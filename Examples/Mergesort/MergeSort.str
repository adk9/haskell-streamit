int->void filter filt17()
{
	work pop 1 {
		println(pop());
	}
}

int->int filter filt18(int var8)
{
	work push var8 pop var8 {
		int var9 = 0;
		int var10 = 1;
		while (((var9 < var8) && (var10 < var8))) {
			int var11 = 0;
			int var12 = 0;
			var11 = peek(var9);
			var12 = peek(var10);
			if ((var11 <= var12)) {
				push(var11);
				var9 = (var9 + 2);
			} else {
				push(var12);
				var10 = (var10 + 2);
			}
		}
		int var13 = 0;
		if ((var9 < var8)) {
			var13 = var9;
		} else {
			var13 = var10;
		}
		int var14 = 0;
		for (var14 = var13; (var14 < var8); var14 = (var14 + 2)) {
			push(peek(var14));
		}
		for (var14 = 0; (var14 < var8); var14 = (var14 + 1)) {
			pop();
		}
	}
}

void->int filter filt15(int var3)
{
	work push var3 {
		int var4 = 0;
		for (var4 = 0; (var4 < var3); var4 = (var4 + 1)) {
			push((var3 - var4));
		}
	}
}
int->int pipeline filt16(int var5)
{
	if ((var5 > 2)) {
		add splitjoin {
			split roundrobin();
			add filt16((var5 / 2));
			add filt16((var5 / 2));
			join roundrobin();
		}
	}
	add filt18(var5);
}

void->void pipeline MergeSort()
{
	int var1 = 16;
	int var2 = 4;
	add filt15((var1 / var2));
	add filt16(var1);
	add filt17();
}

