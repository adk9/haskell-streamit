int->void filter IntPrinter()
{
	work pop 1 {
		println(pop());
	}
}

int->int filter Merger(int var6)
{
	work push var6 pop var6 {
		int var7 = 0;
		int var8 = 1;
		while (((var7 < var6) && (var8 < var6))) {
			int var9 = 0;
			int var10 = 0;
			var9 = peek(var7);
			var10 = peek(var8);
			if ((var9 <= var10)) {
				push(var9);
				var7 = (var7 + 2);
			} else {
				push(var10);
				var8 = (var8 + 2);
			}
		}
		int var11 = 0;
		if ((var7 < var6)) {
			var11 = var7;
		} else {
			var11 = var8;
		}
		int var12 = 0;
		for (var12 = var11; (var12 < var6); var12 = (var12 + 2)) {
			push(peek(var12));
		}
		for (var12 = 0; (var12 < var6); var12 = (var12 + 1)) {
			pop();
		}
	}
}

void->int filter SortInput(int var13)
{
	work push var13 {
		int var14 = 0;
		for (var14 = 0; (var14 < var13); var14 = (var14 + 1)) {
			push((var13 - var14));
		}
	}
}
int->int pipeline Sorter(int var15)
{
	if ((var15 > 2)) {
		add splitjoin {
			split roundrobin();
			add Sorter((var15 / 2));
			add Sorter((var15 / 2));
			join roundrobin();
		}
	}
	add Merger(var15);
}

void->void pipeline MergeSort()
{
	int var1 = 16;
	int var2 = 4;
	add SortInput((var1 / var2));
	add Sorter(var1);
	add IntPrinter();
}

